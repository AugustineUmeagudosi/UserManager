@model UserManager.Models.People

<form name="peopleForm">
    @Html.AntiForgeryToken();
    <div class="modal-header">
        <h4 class="modal-title">
            <button type="button" class="close" data-dismiss="modal" aria-labelledby="Close"><span aria-hidden="true">&times;</span></button>
        <span>@*@(Model.Id > 0 ? "Update User : Create New User")*@</span>
        <span>Create New User</span>
        </h4>
    </div>
    <div class="modal-body">
        @Html.HiddenFor(c=>c.Id)
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    @Html.LabelFor(x => x.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.FirstName, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Surname, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.Surname, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.Surname, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.DateOfBirth, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.DateOfBirth, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.DateOfBirth, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Height, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.Height, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.Height, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.HairColor, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.HairColor, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.HairColor, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.Weight, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(x => x.Weight, new { htmlAttributes = new { @class = "form-control", required = true } })
                        @Html.ValidationMessageFor(x => x.Weight, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-sm pull-left btn-warning" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-sm pull-right btn-success" onclick="createOrUpdate()">Save</button>
    </div>
</form>
